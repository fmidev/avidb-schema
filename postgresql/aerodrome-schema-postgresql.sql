SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;
SET SCHEMA 'public';

START TRANSACTION;

DROP VIEW IF EXISTS avidb_aerodrome_iwxxm_metadata;
DROP TABLE IF EXISTS avidb_aerodrome;

CREATE TYPE aixm_uom_distance_vertical AS ENUM ('FT', 'M', 'FL', 'SM', 'OTHER');

CREATE TABLE avidb_aerodrome
(
    aerodrome_id                  serial                                                     NOT NULL,
    station_id                    integer,
    icao_code                     varchar(4),
    iata_code                     varchar(3),
    fir_code                      varchar(4)                                                 NOT NULL,
    aerodrome_name                varchar(60),
    orig_reference_point          varchar(32)                                                NOT NULL,
    reference_point               geometry(POINT, 4258)                                      NOT NULL,
    reference_point_elevation     numeric(12, 4),
    reference_point_elevation_uom aixm_uom_distance_vertical,
    field_elevation               numeric(12, 4),
    field_elevation_uom           aixm_uom_distance_vertical,
    valid_from                    timestamptz default timezone('UTC', '1700-01-01 00:00:00') NOT NULL,
    valid_to                      timestamptz default timezone('UTC', '9999-12-31 00:00:00') NOT NULL,
    modified_last                 timestamptz default timezone('UTC', now())                 NOT NULL,
    CONSTRAINT CK_icao_code CHECK (icao_code ~ '^[A-Z]{4}$'),
    CONSTRAINT CK_iata_code CHECK (iata_code ~ '^[A-Z]{3}$'),
    CONSTRAINT CK_aerodrome_name CHECK (aerodrome_name ~
                                        '^([A-Z]|[0-9]|[, !"&#$%''''()*+-\\./:;<=>?@[\\\]^_|{}]){1,60}$'),
    PRIMARY KEY (aerodrome_id),
    FOREIGN KEY (station_id) REFERENCES avidb_stations
)
;
CREATE INDEX avidb_aerodrome_reference_point_idx ON avidb_aerodrome USING GIST (reference_point);
CREATE UNIQUE INDEX ON avidb_aerodrome (station_id) WHERE icao_code IS NOT NULL;
CREATE UNIQUE INDEX ON avidb_aerodrome (icao_code) WHERE icao_code IS NOT NULL;
CREATE UNIQUE INDEX ON avidb_aerodrome (iata_code) WHERE iata_code IS NOT NULL;
CREATE TRIGGER avidb_aerodrome_trg
    BEFORE INSERT OR UPDATE
    ON avidb_aerodrome
    FOR EACH ROW
EXECUTE PROCEDURE modified_last();
GRANT SELECT ON avidb_aerodrome TO avidb_ro;

CREATE OR REPLACE VIEW avidb_aerodrome_iwxxm_metadata
AS
SELECT avidb_aerodrome.aerodrome_id AS id,
       avidb_stations.icao_code     AS designator,
       avidb_aerodrome.icao_code,
       iata_code,
       fir_code,
       aerodrome_name,
       reference_point,
       reference_point_elevation,
       reference_point_elevation_uom::text,
       field_elevation,
       field_elevation_uom::text
FROM avidb_aerodrome,
     avidb_stations
WHERE avidb_aerodrome.station_id = avidb_stations.station_id
  AND avidb_aerodrome.station_id IS NOT NULL
  AND avidb_stations.station_id IS NOT NULL
;
GRANT SELECT ON avidb_aerodrome_iwxxm_metadata TO avidb_ro;

CREATE TABLE IF NOT EXISTS gt_pk_metadata
(
    table_schema  VARCHAR(32) NOT NULL,
    table_name    VARCHAR(32) NOT NULL,
    pk_column     VARCHAR(32) NOT NULL,
    pk_column_idx INTEGER,
    pk_policy     VARCHAR(32),
    pk_sequence   VARCHAR(64),
    unique (table_schema, table_name, pk_column),
    check (pk_policy in ('sequence', 'assigned', 'autogenerated'))
);
GRANT SELECT ON gt_pk_metadata TO avidb_ro;
COMMENT ON TABLE gt_pk_metadata IS 'GeoServer primary key metadata table. See https://docs.geoserver.org/stable/en/user/data/database/primarykey.html';
COMMENT ON COLUMN gt_pk_metadata.table_schema IS 'Name of the database schema in which the table is located.';
COMMENT ON COLUMN gt_pk_metadata.table_name IS 'Name of the table to be published.';
COMMENT ON COLUMN gt_pk_metadata.pk_column IS 'Name of a column used to form the feature IDs.';
COMMENT ON COLUMN gt_pk_metadata.pk_column_idx IS 'Index of the column in a multi-column key. In case multi column keys are needed multiple records with the same table schema and table name will be used.';
COMMENT ON COLUMN gt_pk_metadata.pk_policy IS 'The new value generation policy, used in case a new feature needs to be added in the table (following a WFS-T insert operation).';
COMMENT ON COLUMN gt_pk_metadata.pk_sequence IS 'The name of the database sequence to be used when generating a new value for the pk_column.';

INSERT INTO gt_pk_metadata (table_schema, table_name, pk_column)
VALUES ('public', 'avidb_aerodrome_iwxxm_metadata', 'id')
ON CONFLICT DO NOTHING;

-- ROLLBACK;
COMMIT;
